<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>riscv-note-Nov012018</title>
      <link href="/2018/11/01/riscv-note-Nov012018/"/>
      <url>/2018/11/01/riscv-note-Nov012018/</url>
      
        <content type="html"><![CDATA[<h1>brief summary</h1><p>update to Nov 1st, 2018 by Pt.</p><h2>1. Rocket Chip Generator</h2><p>首先，注意这个项目名字是“generator”，它只是用来生成RocketChip的一系列文件，其源代码用Chisel3（Chisel3基于Scala，Scala基于Java）所写，而这个Chisel3程序可以生成</p><ul><li>C语言仿真代码</li><li>Verilog FPGA代码</li><li>Verilog ASIC代码</li></ul><h2>2. riscv-tools</h2><p>根据RocketChip在Github上的主页说明而clone到本地的riscv-tools文件夹其实是riscv一系列工具的源文件所在（也可以认为是安装文件），当在这个文件夹里成功执行 <code>./build.sh</code> 后，将会把所有工具安装到 <code>$RISCV</code> 所指向的路径。关于riscv-tools，应该查看 <a href="https://github.com/riscv/riscv-tools/blob/master/README.md" target="_blank" rel="noopener">https://github.com/riscv/riscv-tools/blob/master/README.md</a></p><h2>3. Synopsys VCS仿真</h2><h3>(1) VCS 仿真一般流程</h3><p>假设有 verilog 源文件：</p><ul><li>tb.v</li><li>file1.v</li><li>file2.v</li><li>file3.v</li></ul><p>假设目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line"> +-- list.f</span><br><span class="line"> +-- src</span><br><span class="line">      +-- tb.v</span><br><span class="line">      +-- file1.v</span><br><span class="line">      +-- file2.v</span><br><span class="line">      +-- file3.v</span><br></pre></td></tr></table></figure><p>那么list.f的内容应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./src/tb.v</span><br><span class="line">./src/file1.v</span><br><span class="line">./src/file2.v</span><br><span class="line">./src/file3.v</span><br></pre></td></tr></table></figure><p>使用VCS仿真的指令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在test目录里</span></span><br><span class="line">vcs -full64 -f list.f</span><br></pre></td></tr></table></figure><p>将会生成可执行文件 <code>simv</code><br>执行这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./simv -gui</span><br></pre></td></tr></table></figure><p>将会打开dve。</p><h3>RochekChipGenerator</h3><p>在 <code>rocketchip/vism</code> 文件夹内，应该只有三个文件：</p><ul><li>Makefile</li><li>Makefrag</li><li>Makefrag-verilog</li></ul><p>如果有多的文件，那是多余的，可以执行 <code>make clean</code> 清理。目前我对于Makefile的理解是，它其实是一个可以用 <code>make</code> 命令执行的脚本。它有不同的选项，为了查看波形，应该执行 <code>make debug</code> ，然后会生成可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simv-freechips.rocketchip.system-DefaultConfig-debug</span><br></pre></td></tr></table></figure><p>如果已经安装了riscv-tests， 从 <code>$RISCV/share/riscv-tests/isa</code> 选择测试文件作为参数，执行上面生成的可执行文件。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./simv-freechips.rocketchip.system-DefaultConfig-debug <span class="variable">$RISCV</span>/share/riscv-tests/isa/rv64ui-p-and</span><br></pre></td></tr></table></figure><p>就会在当前目录（vsim）生成文件 <code>vcdplus.vpd</code> ，使用dve打开vpd文件：</p><pre><code class="language-bash">dve -full64 -vpd ./vcdplus.vpd</code></pre><h2>4. RocketChip测试文件的生成</h2><p>目前已知测试文件的汇编源码在 <code>rocket-chip/riscv-tools/riscv-tests/</code> 里，其余不详。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>安装ClickOnce部署的程序遇到的问题</title>
      <link href="/2018/08/29/%E5%AE%89%E8%A3%85ClickOnce%E9%83%A8%E7%BD%B2%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/29/%E5%AE%89%E8%A3%85ClickOnce%E9%83%A8%E7%BD%B2%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>安装ClickOnce部署的程序 - 安全警报 - 无法安装</h1><p>最近需要安装一个用ClickOnce部署的软件，然而下载好安装包，双击打开是这样的：</p><img src="/2018/08/29/安装ClickOnce部署的程序遇到的问题/Security_warning.png"><p>这里所谓的的“安全设置”我实在没什么头绪，因为一般的第三方安装程序我都可以安装的，可是ClickOnce不一般啊。我首先是百度了，这个时候百度一般是会令我失望的，这次当然不例外。我使用的关键词是“clickonce 不能安装”，也试着添加了“安全警报”等关键词，都找不到我遇到的这个问题。同样的关键词我用Google也没找到。然后我使用了英文关键词“clickonce cannot install”，就找到同样的问题了。</p><ul><li>https://superuser.com/questions/1252575/unable-to-install-clickonce-application-due-to-security-settings-windows-10</li><li>https://msdn.microsoft.com/en-us/library/ee308453.aspx</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Linux 获取ipv6地址</title>
      <link href="/2018/08/26/Linux-%E8%8E%B7%E5%8F%96ipv6%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/08/26/Linux-%E8%8E%B7%E5%8F%96ipv6%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>最近在 Linux 环境（Fedora 26 - 28 、Ubuntu 16 - 18）发现个问题 :同样的网络环境，Windows 10都能获取ipv6地址并正常使用ipv6，Linux系统里就是获取不了全局ipv6地址。记得以前用fedora 25的时候就用这个情况，系统刚刚装好的时候能够使用ipv6，但是过一段时间后就不行了。Ubuntu 16.04 LTS 也有这种情况。因为用Windows系统的时间比较多，我也没怎么在意这个问题。最近在 Linux 系统需要使用ipv6来访问Google查资料，我决定来看看怎么解决这个问题。搜索使用的关键词是“ipv6”、“校园网”、“地址”、“获取”，先是百度啦，得到大量来自 <u>百度知道</u>、<u>CSDN</u>、<u>博客园</u>、<u>forum.ubuntu.org.cn</u> 的重复的结果，大概都是在说改什么配置文件，然后重启网络服务。甚至，还有大量结果在教如何开启ipv6 <img src="/images/huaji.png" alt="huaji"></p><p>后来切换到Windows 用ipv6用Google搜索了一下，终于找到了另一个解决办法：</p><blockquote><p>https://forum.suse.org.cn/t/linux-global-ipv6/3927</p></blockquote><p>执行：<code>dhclient -6 -d [连接名]</code> 然后就发现获取到了ipv6地址。</p><p>刚刚在知乎（ https://www.zhihu.com/question/50283246 ）看到Windows 10 曾经似乎有同样的问题。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Linux 设置DNS遇到的问题</title>
      <link href="/2018/08/19/Linux-%E8%AE%BE%E7%BD%AEDNS%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/19/Linux-%E8%AE%BE%E7%BD%AEDNS%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>由于需要在教育网环境里使用ipv6，访问一些ipv6网站，遂改了DNS。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat /etc/resolv.conf</span></span><br><span class="line">nameserver 202.112.14.21</span><br><span class="line">nameserver 202.112.14.11</span><br><span class="line">nameserver 2001:4860:4860::8888</span><br><span class="line">nameserver 2001:4860:4860::8844</span><br><span class="line">nameserver 2001:da8::666</span><br><span class="line">nameserver 101.6.6.6</span><br></pre></td></tr></table></figure><p>前两行是ipv4自动获取的DNS，应该是学校的DNS服务器，3、4行是Google Public DNS，最后两行是THU的DNS服务器。</p><p>这样配置，在教育网没什么问题，但是最近宿舍断网，用手机热点就出问题了。ping ip地址可以ping通，但是ping 域名就提示未知域名。由于在Windows里我只设置了ipv6的dns，因此在Windows里并没有遇到这个问题，我就觉得是Linux的问题了。</p><p>开始我也怀疑教育网的服务器公网是不是能够访问，但是202.112.14.21、202.112.14.11两个地址竟然ping得通。</p><p>百度无果。</p><p>我还是觉得这个问题是DNS得问题，然后试了nslookup，发现还真的是教育网的DNS服务器不对公网服务。</p><p>然后我把“nameserver 101.6.6.6”移到了第一行，就好了。</p><blockquote><p>[1] 教育网条件下使用 202.112.14.21</p></blockquote><img src="/2018/08/19/Linux-设置DNS遇到的问题/CERNET_nslookup.png"><blockquote><p>[2] 公网条件下使用 202.112.14.21 (中国联通，手机热点)</p></blockquote><img src="/2018/08/19/Linux-设置DNS遇到的问题/non_cernet_nslookup.png"><blockquote><p>[3] 公网条件下 202.112.14.21可以ping通 (使用 https://studio.coding.net/)</p></blockquote><img src="/2018/08/19/Linux-设置DNS遇到的问题/non_cernet_ping.PNG">]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>读《自达尔文以来:自然史沉思录》</title>
      <link href="/2018/08/03/%E8%AF%BB%E3%80%8A%E8%87%AA%E8%BE%BE%E5%B0%94%E6%96%87%E4%BB%A5%E6%9D%A5-%E8%87%AA%E7%84%B6%E5%8F%B2%E6%B2%89%E6%80%9D%E5%BD%95%E3%80%8B/"/>
      <url>/2018/08/03/%E8%AF%BB%E3%80%8A%E8%87%AA%E8%BE%BE%E5%B0%94%E6%96%87%E4%BB%A5%E6%9D%A5-%E8%87%AA%E7%84%B6%E5%8F%B2%E6%B2%89%E6%80%9D%E5%BD%95%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h1>读序言</h1><p>我对于达尔文及进化论的了解仅限于中学课本。说起“进化”，我从小接触到的观点更近似于“用进废退”。有这样的说法，长颈鹿为了吃到高处的树叶拼命地伸长脖子，大象为了浇水给自己洗澡“练”就了一只长鼻子。从这个角度看，给人一种积极的印象——通过努力，将会获得新的能力。</p><p>但是中学学习了生物才晓得，原来“进化”的对象不是个体，而是群体。对于个体而言，不适应环境就生存不了。不适应环境的基因没办法流传，适应环境的基因得以延续，因此在自然选择下，从统计的角度来看，生物某些形状发生了改变，进化得以发生。这样看来有些消极——原来能力是天生注定的，大自然不需要你时，你只能被淘汰。</p><p>但是，这样来看生物的进化其实并不消极。为了适应环境而出现的新性状自变异而来，变异是进化的基础。变异是随机的，没有方向性的，变得好继续生存，变得不好就灭亡。我们存在于这世上，至少还没被大自然淘汰。人类走到今天这个地步，是不是一种幸运呢？</p><p>天地不仁，以万物为刍狗 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。然而人们往往过于自负，正如弗洛伊德所说的“人类朴实的自恋<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>”，这就造成了进化论一开始并不能被人们接受。进化论与自然选择，并不消极，它只是告诉了我们一个事实而已。人类一步步进化，其实是很多随机事件的累积，学过一些概率论和统计学的知识后，更能体会到这个事实的奇妙：一方面，我们的存在，是一个绝对的小概率事件，另一方面我们的存在，又是多么的必然！</p><h1>读第一部分（关于达尔文）</h1><p>达尔文在1838年就的得出了全新的进化理论，然后过了21年，才发表他的观点。一般来说，是在贝格尔号上的经历，让达尔文的物种不变的信念发生了动摇。后来，达尔文总结整理出了完整的理论，但是对于理论的发表，达尔文却十分谨慎。</p><p>作为生活在汉文化圈的现代人，达尔文但是所面对的压力也许我并不能完全理解。读了这一部分，这里我只能简单复述一下。在达尔文的时代，“生物的进化”这个观点并不是讳莫如深的。问题在于，被普遍赞同的“进化”，指的是生物出于完善自我的目的，从而增强原有的能力或者获得新的能力。也就是说，是“意识”决定了“物质”的发展方向，同时，这种观点与基督教教义是兼容的。但是，达尔文的观点，则充满了唯物主义的意味。达尔文的进化论中，生物的变异是随机的，并不受“意识”的影响，是自然选择决定了生物进化的方向。这也就说明，历史的未来走向是随机的，那么“上帝”的作用就微乎其微了。</p><h1>读第二部分（人类的进化）</h1><p>“我们智人并非是一开始就向着崇高位置迈进的预定梯状进化的产物。我们仅仅是曾经繁茂的枝状谱系中一个生存下来的分支。”<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>这句话也体现出了达尔文进化论的内涵。人类没什么特别，只是通过自然选择而存活下来的生物而已。听到某些传教的人说，宗教让人心生敬畏，让人类崇尚善良、与自然和谐相处。关于宗教的产生，我记得有这样的说法：远古时期，人类对自然还不甚了解，因此对打雷下雨、日月运行等自然现象归结于某种超自然的力量的作用，而拥有这种力量的就是神。传说伏羲就是观察和总结了大量的自然现象，结合自己的经验，创立了八卦。其实自然科学也是在研究这些现象背后的力量，只不过现在的科学建立在严密的数理基础上，更加具体。</p><p>我记得小时候听说过一个跟人进化有关的理论，大意是说人类的进化是由低级到高级，先是单细胞，再是鱼，然后是青蛙，然后是猴子，最后是人。人类胎儿的发育就恰好重复了这个过程。读了这一部分，我终于知道这个理论的名字——重演论。</p><p>基因对于生物的影响也超出我想象。照道理说（我之前以为的道理），基因是物质，那么它能够影响的，只是生物的功能和结构。但是，我才知道，人类的社会和家庭，这种抽象的东西，也和基因有关系。这里我再一次体会到马克思的辩证唯物主义的厉害之处。有一个概念叫“幼态持续”。“他（人类）的整个生命周期的几乎30%都用于生长。”<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>人类的幼态持续就是由于基因决定的，人类的婴儿在出生之后大脑仍未发育完全，因为大脑发育完全的胎儿是生不出来的。但是正因为人类的幼态持续，人类父母与孩子的联系期就很长，更容易形成家庭的纽带，进而形成复杂的人类社会。</p><h1>读第三部分（奇特的生物与进化的样板）</h1><p>这一部分主要介绍了几个例子：爱尔兰麋鹿、瘿蚊、刚竹、蝉、蚌。进化具有极大的复杂性和多样性。</p><p>爱尔兰麋鹿拥有巨大的角，如果从人类一般的常识来看，这类生物是把角当作武器，为了生存，角越来越大，最后不堪重负，灭绝了。但是这却与达尔文进化论违背：既然角越来越大会导致灭亡，那么在自然选择下，生物的进化怎么会往不利于生存的方向进行呢？但是文章作者分析后得出结论，爱尔兰麋鹿巨大的角，其实是为了避免同类争斗，这是有利于生存的；事实上，爱尔兰麋鹿的灭绝并不是因为巨大的角，而是因为气候的多变。</p><p>瘿蚊疯狂的繁殖，以及弑母行为，在人类看来相当变态。事实上，瘿蚊这样做，也是为了生存。我们总以为进化就是生物的结构和功能发生改变，殊不知像瘿蚊这样调整对环境的适应策略也属于进化。对于不稳定的生存环境，这类生物只有疯狂的繁殖才不至于灭绝。</p><p>刚竹和蝉的例子令我耳目一新。原来“雨后春笋”的背后另有深意；蝉在夏天一齐出来聒噪也是有原因的。严格调整出现的时间，令个体在某个较短的时间段内数目突然增多，让捕食者吃不完，也是一种生存策略！竹子更厉害了，一百多年才开一次花，让其它生物无法追踪开花周期（除了会记笔记的人类）。</p><p>蚌的例子则引出了一个问题：完美器官是如何进化而来的？我记得很多有神论者都有这样的观点，人类的构造如此精妙，如果不是一位具有大智大慧的神明所设计，仅仅凭借简单粗糙的自然选择，如何实现？蚌的瓣恰似一只游动的鱼，这种蚌借此完成繁殖过程。蚌要繁殖，可以有更简单的办法呀？但是为什么会进化出这样一个巧妙地结构？我们用达尔文进化论的观点来解释。我们之所以认为这是一个巧妙的结构，是因为我们是从结果来看的。在进化论中，变异的方向是随机的，这种“巧妙结构”的初级状态只不过是为了适应某种其它环境变化而进化出的结构，并且并不精巧。但是随着环境的改变，当初进化出的并不精巧的结构开始具有了新的功能。这样一步一步地，就形成了现在我们看到的“完美器官”。</p><p>“完美器官”不是一下子就形成的。从辩证唯物主义的观点来看，“完美器官”的形成，其实就是一个量变到质变的过程。每一次随机的变异都会产生一个“偏差量”，当偏差量较小的时候，我们不会觉得有什么大的不同，甚至不会察觉。但是，在一个很长的时间段内，“偏差量”不断累积，最后形成了一个全新的结构，具有全新的功能，实现了“质变”。</p><p>为什么马克思对达尔文的进化论有那么高的评价？我越来越意识到，达尔文进化论具有深刻的辩证唯物主义内涵，因此也不难理解马克思说“它（指《物种起源》一书）为我们的观点提供了自然史基础。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>”。</p><h1>读第四部分（生命史中的模式与间断）</h1><p>这部分主要讲了生物分类、单细胞生物、寒武纪大爆发。作者说，强行分类扭曲了我们的生命观，而且无助于我们理解生命史的一些重要特征。我再一次觉得，凡是与达尔文进化论有所违背的观点，都同时违背了辩证唯物主义的观点。显然，生硬的分类，违背了唯物辩证法里普遍联系的观点。</p><p>我记得中学生物课在介绍达尔文进化论的同时也提到了达尔文进化论面临的挑战。其中之一就是寒武纪生物大爆发。在大约6亿年前的寒武纪，绝大多数无脊椎动物门在几百万年的很短的时间内出现了。但是，本书的作者却提醒说，进化的突发与大规模灭绝与达尔文的理论并不对立。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>并进而用S型曲线、有性生殖的产生、生物收割者来解释寒武纪大爆发。其实当年我在看到教材认为“寒武纪大爆发对达尔文进化论是一个挑战”时，也感觉到奇怪。但是，如何解释寒武纪爆发的原因，也的确是一个绕不开的问题。看来我并不是一个善于思考的人。高中的时候，我也学习过S型曲线，但是我从来没有把它和当年的疑问联系在一起。当然，S型曲线并不能完美的解释寒武纪大爆发的问题，但是它给出了一个方向，提示我们应当去研究前寒武纪时期的生态环境。</p><p>自达尔文以来，很多看似对达尔文进化论形成挑战的问题，最后却可以用达尔文进化论解释。正如作者多次提及，是西方人的固有偏见在挑战达尔文的进化论。但是由于达尔文进化论者的努力，这些偏见正随着时间逐渐被修正。人类也能更加真实地认识我们所在的这个星球。</p><p>我们为什么要去研究了解这些真相？为什么不能把一切寄托于神明（人类的偏见）？史上的生物大灭绝也许给与了我们警示。白垩纪的生物大灭绝让曾经煊赫一时的恐龙从此销声匿迹，仅仅留下残骸供后世生物参观。人类，会不会也有这样的一天？研究古生物的进化与灭绝，正是在为人类的将来探索出路。</p><h1>读第五部分（地球的理论）</h1><p>这一部分由于我缺少地质学、天文学相关的知识储备而读起来有些吃力。这部分主要讲了灾变论、均变论、大陆漂移学说的由来及历史。</p><p>西方一些早期研究地球演变的学者，一些早期的学者受神学的影响，认为《圣经》中所描述的地球史事件确有其事，为了避免显得上帝说的和做的不一致，他们尽力地用理性的思维去解释这些地球史事件，把地质记录压缩到《圣经》编年的框框内，认为山脉、峡谷的形成是一个短时间的过程。这就形成了“灾变论”。“均变论”则认为时间无限、自然规律恒定，自然规律的缓慢作用导致了地质变化。然而“均变论”刚刚提出时，更像是一个外行人士基于部分材料而进行的天真的想象。现代的地质理论吸收了大部分的“均变论”和部分的“灾变论”。这说明“外行人士”的质疑与猜想，并不一定全是错的。科学的发展也离不开这些质疑与猜想。</p><p>我记得还是在小学的时候就听说过魏格纳发现大陆漂移的故事。据说魏格纳生病在医院疗养时，盯着病床对面墙上挂着的世界地图，发现各个大陆的外形似乎能够拼接在一起，由是提出了大陆漂移学说。随后各个大陆发现的动植物化石也佐证了这一观点。</p><p>本书这部分描写了更多的细节。尽管动植物化石、岩石分布等等证据能够证明大陆漂移学说，但是没有人能够拿出令人信服的大陆漂移的原理。因此，大陆漂移学说显得十分荒谬。甚至“陆桥”这种假说听起来都要比大陆漂移学说更加合理，那些被用来证明大陆漂移学说的证据也变得没有意义。但是随着进一步的研究，大陆漂移的原理似乎也能够被解释，那些曾被认为没有意义的证据又变得有了意义。因此，虽然仍有争议，但是现在大陆漂移学说处于主流地位。</p><h1>读第六部分（大小与形状，从教堂到脑，到行星）</h1><p>形状和大小的关系不能够忽略。生物的形状和大小是对自然适应的结果。小虫子如果按照比例变大，大象如果按照比例缩小，都将无法生存。生物的功能是由大小和形状决定的。人类大的身体成为人类自我意识智力的先决条件。我们的技能和行为与我们身体的大小非常合适。这样分析，正体现了唯物主义的内涵。因此某些科幻片里某些主观的奇怪的构想显得有些滑稽。</p><p>大小与形状两个约束条件当然不局限于生物。地质学同样适用。地球、月球、火星三个天体的形状类似，但是大小不同。因此，地球、月球、火星具有不同的状况。月球体积小，外壳厚而且硬，这导致了月球上没有大气侵蚀，没有表面物质的再循环，月球也不能通过产生内部的热搅动来改变她的外貌。所以月球30亿年来没有多少变化。地球体积大，相对表面积小，外壳较薄，万有引力场大，形成了两个有效的热体系。因此地球才能有丰富的地质运动，包括板块漂移。火星的情况就大概介于月球和地球之间。</p><h1>读第七部分（社会中的科学——一种历史的看法）</h1><p>科学会受到社会的影响，因为社会导致了偏见，偏见需要披上科学的伪装。这些偏见被修正，科学与社会就共同进步。</p><p>在人类的进化过程中，大脑重要还是直立行走的姿势重要，是一个问题。社会上的唯心主义思想，让人们不知不觉地对人的意识投入过多地关注。人的意识当然和大脑密切相关，因此认为人类与其它动物之间的所有差异都由于脑的构造不同，至于姿势和语言，只不过是脑的逐渐完善和心智结构逐渐建立的附带表现。“人的意识第一”这个观念占据了主要地位，科学研究也不得不与之兼容。任何新发现的可能对当前观点造成威胁的证据，都会被人竭力地从某个角度解读，以使其和主流观点兼容。</p><p>但是我们知道，达尔文进化论具有深刻的唯物主义内涵。恩格斯从唯物主义的角度出发，论证了直立姿势才是人类进化的关键一环。恩格斯的观点已经超出了生物学的范畴，在社会学领域对固有的社会偏见进行了批评。恩格斯不仅反对了“大脑重要”的观点，还分析了唯心主义世界观的形成过程，对于那些主张“大脑重要”观点的人是一次“釜底抽薪”。</p><p>重演论和幼态持续理论也伴随着人类社会的变迁。西方白人以自我为中心，弄出了一套种族歧视的理论。滑稽的是，在重演论和幼态持续理论两种“相反”的理论下，一些学者竟然都可以得出“白人等级最高”的结论。正如前文所述，这是偏见披上了科学的外衣。当时的欧洲白人需要对外扩张，人种歧视理论正好提供了理由。在这种社会导向之下，需要维护人种歧视理论的正确性。只需要对进化论稍作曲解，就可以得到对此有利的“科学结论”。</p><p>罪犯人类学在当年生物科学还处于宏观水平时，认为大多数罪犯是返祖的人类。甚至有人认为，白人罪犯、白人孩子和南美印第安人一般都不知道廉耻。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>这就为种族主义和帝国主义提供了论据。现在生物科学已经发展到分子水平，我们有时候所讨论的“犯罪基因”，“XYY”染色体，也正是这种思想的遗留。</p><h1>读第八部分（人性的科学与政治学）</h1><p>这一部分我认为虽然不太好理解但是很有意思。这一部分的核心关键词是“决定论”。</p><p>决定论盛行的原因大概有这几种。</p><p>第一种原因是我们在做研究时养成了“分类”的习惯。我们在了解人类自身时，总是想着把人类细分。对于某一类人群，我们总觉得应该找出他们在生物学上的共性，甚至去探讨他们在基因上的共同之处，从而对他们的行为进行解释，认为他们的行为是由某种确切的原因决定的。</p><p>第二种原因是政治或者社会的原因。社会或者政治的原因，造成了人群之间的差距，决定论被用来解释这些差距。比如将战争和暴力归咎于食肉祖先遗留的传统；将贫穷和饥饿归咎于那些人自身的条件，<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>以此为某些人在政治上开脱。</p><p>第三种原因是为了解释人类的某些行为。“性善论”和“性恶论”是最常见的辩论题目了。我们往往把“性恶”归结于弱肉强食的远古时代，原始人类为了生存不得不具有攻击性和暴力倾向，因此决定这些行为的基因流传了下来。“性善”源自于人类社会的发展，人类为了共同的利益，不得不互相帮助，是人类的理性创造，是人类文明的闪光点（而与基因无关）。但是英国理论生物学家W·D·汉密尔顿在20世纪60年代提出的“亲选择 ”理论，经过其他科学家的演绎，成功从达尔文进化论的角度解释了人类的利他行为。从而“性善论”和“性恶论”在基因相关的假设上开始处于同等地位。</p><p>我们必须认识到，决定论只是一种解释现象的假说，并没有确凿的证据证明这些假说的正确。事实上，我们同时也可以认为，早期教育，文化，阶级，地位和所有我们称作“自由意愿”的无形之物，决定了我们如何限制基因许可的多种多样的行为。<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>人类的大脑是可变的，我们在分析人类行为时，既要考虑客观物质，也要考虑人的主观能动性。</p><h1>读后记</h1><p>作者的观点总结如下：</p><p>达尔文的观点是多元论的和广容性的。自然选择具有绝对重要性，但是其它因素也不能忽略。在其它领域，也应该采取类似的态度。很对经验告诉我们，最合理的解释往往是两个极端的假说的结合，其中一个是主要因素，另一个是次要因素。</p><p>我想说，这不就是唯物辩证法中的矛盾分析法吗？</p><h1>我的总结</h1><p>不知不觉就看完了这本书，看看office左下角的字数统计竟然由六千多字了！这本书给我最大的感触就是：摒弃偏见，客观的，多角度的考虑问题。恰好这学期学了一些马克思唯物辩证法，虽然达尔文进化论是辩证唯物主义的基础之一，肯定和达尔文进化论具有良好的兼容性，但是我还是现学现卖，尝试着用唯物辩证法分析书中提到的一些问题。当然，看了这本书我也涨了不少见识。一是获得了不少人类史和地质史的常识；二是了解了一些奇特的生命模式（竹子、蝉等）；三是学到了不少生命科学的历史，理解了到科学与社会、政治的关系。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">出自《道德经》第五章</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">出自所读之书序言</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">第54页</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">第61页</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">第10页</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">第122页</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">第237页</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">第263页</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">第297页</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>DES加密算法的Verilog实现</title>
      <link href="/2018/08/01/DES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84Verilog%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/01/DES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84Verilog%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1>DES算法简介</h1><p>DES是一个分组加密算法，典型的DES以64位为分组对数据加密，加密和解密用的是同一个算法。密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位，使得每个密钥都有奇数个“1”），分组后的明文组和56位的密钥按位替代或交换的方法形成密文组。</p><img src="/2018/08/01/DES加密算法的Verilog实现/des_sch.png"><p>具体参考：</p><blockquote><p>https://blog.csdn.net/yxtxiaotian/article/details/52025653https://blog.csdn.net/yxtxiaotian/article/details/52025653</p></blockquote><p>实现代码：</p><blockquote><p><a href="https://github.com/func2b/DES_Encryption" target="_blank" rel="noopener">https://github.com/func2b/DES_Encryption</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>KDE5安装fcitx</title>
      <link href="/2018/04/08/KDE5%E5%AE%89%E8%A3%85fcitx/"/>
      <url>/2018/04/08/KDE5%E5%AE%89%E8%A3%85fcitx/</url>
      
        <content type="html"><![CDATA[<ul><li>System Environment:<ul><li>fedora x86_64 Linux 4.15.14-300.fc27.x86_64 (Workstation Edition)</li></ul></li></ul><ul><li><p>Desktop Environment:</p><ul><li>KDE 5.44.0 / Plasma 5.12.4 (Installed using the &quot;groupinstall&quot; command)</li></ul></li></ul><p>Steps:</p><ol><li>Install kcm-fcitx</li><li>Install other components of fcitx according to your needs. (For example, install Anthy to support Japanese input.)</li><li>Executing &quot;im-chooser&quot; in the terminal and select fcitx</li><li>Log out and log in again.</li></ol><p>That's enough.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Win10+Ubuntu双系统的安装</title>
      <link href="/2017/10/24/Win10-Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/10/24/Win10-Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>现在Ubuntu的安装镜像做的已经很好了。我也是曾被网上的大神们写的文章搞得云里雾里的。支持uefi的笔记本/电脑现在已经是主流了，对于支持uefi的电脑来说，装个Linux系统（ubuntu、fedora、openSUSE我都试过）很方便。</p><p>首先到速度最快的镜像站下载安装镜像。例如中科大和清华大学的镜像站点。ubuntu的镜像文件直接用软碟通的默认设置写到U盘里面就可以啦。Fedora到<ruby><del>官网</del><rt>Github</rt></ruby>去下载“fedora media writer”（<ruby><del>运行不了想办法下载老版本的</del><rt>经测试，Github上最新版fedora media writer可以正常运行</rt></ruby>）。</p><p>然后，用Windows的磁盘管理划分一块未格式化的分区。当然如果您的电脑曾受一些快速分区工具的侵害，分区很乱，我建议格盘重装Windows10。崭新的win10应该只有三个分区：保留分区、efi分区、NTFS分区。NTFS分区一般很大，所以用Windows自带的磁盘管理分出一部分来安装Linux。</p><p>然后插入U盘重启电脑通过U盘启动。打开安装程序，一路按照默认设置走就行了。要关secureboot的注意有选项可以关。分区？还要怎么分区，我觉得Linux只分/和swap就行了，这也是ubuntu的默认设置。fedora会分/、/home、swap，可以去调整一下/和/home分别占用的大小，全图形化操作。</p><p>然后，默认使用grub2了？放心，打开主板设置，你会发现有个“ubuntu”和“Windows Boot Manager”，你把Windows Boot Manager调到ubuntu前面就好了。</p><p>卸载。首先注意转移Linux中的文件。然后到Windows里在磁盘管理中把Linux的分区删了。然后，使用diskpart命令（Windows命令行）到efi分区把ubuntu删掉。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>使用Visual Studio在命令行编译C程序</title>
      <link href="/2017/10/23/%E4%BD%BF%E7%94%A8Visual-Studio%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91C%E7%A8%8B%E5%BA%8F/"/>
      <url>/2017/10/23/%E4%BD%BF%E7%94%A8Visual-Studio%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91C%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1>Visual Studio C程序编译方式之命令行方式</h1><p>在Linux下用过gcc之后，突然想起当年初学C语言的时候，用的VC++6.0，创建一个.c文件，点击“compile”，点击“运行”。但是VC++6.0早已过时，当时想用最新版的VS2015来写C程序，于是百度了一下：</p><img src="/2017/10/23/使用Visual-Studio在命令行编译C程序/vs-c-baidu.png" title="Search result from Baidu"><p>很麻烦！并且启动VS2015这个大软件来跑个不超过数十行的C代码，显得很啰嗦。</p><p>现在，在用了很多的IDE后，突然明白了一个道理，**编译器是不会嵌入到GUI程序中的！**所以，VS一定带有命令行可用的C编译器！因此我又百度：&quot;visual studio c 命令行&quot;。第一个结果就是<a href="http://blog.csdn.net/luoweifu/article/details/49847749" target="_blank" rel="noopener">http://blog.csdn.net/luoweifu/article/details/49847749</a>哈？还要配置环境变量？这是什么年代了，还要手动配置环境变量？不过得到了有用信息有：</p><ul><li>cl.exe：编译程序</li><li>link.exe：链接程序</li><li>lib.exe：加载lib库的程序</li><li>nmake.exe：用makefile进行构建、编译的工具</li></ul><p>要不去命令行试一试？</p><img src="/2017/10/23/使用Visual-Studio在命令行编译C程序/jietu201709291907.png"><p>哎哟，还真的不行。不过，我的记忆告诉我，每次装VS都会在开始菜单出现一些命令行图标的链接。我在开始菜单找到了这个:</p><img src="/2017/10/23/使用Visual-Studio在命令行编译C程序/startmenu20170929.png"><p>打开看看——看样子这个链接在启动时自动导入了环境变量并且把工作目录定位到了“%用户%/source”</p><img src="/2017/10/23/使用Visual-Studio在命令行编译C程序/jietu201709291920.png"><p>试试Hello World？</p><img src="/2017/10/23/使用Visual-Studio在命令行编译C程序/jietu201709291925.png"><p><strong>更新：在命令行启用Visual Studio C 编译器（2018年8月31日）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set pp=%cd%</span><br><span class="line">&quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat&quot; &amp;&amp; cd /d %pp% &amp;&amp; set pp=</span><br></pre></td></tr></table></figure><p>和网上很多博客上给的方法不同，这个脚本只是调用了 Visual Studio 自带的配置脚本，最后返回到原先的路径。</p><img src="/2017/10/23/使用Visual-Studio在命令行编译C程序/hello_world.png">]]></content>
      
      
      
        <tags>
            
            <tag> VisualStudio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CERNET使用ipv6</title>
      <link href="/2017/10/23/CERNET%E4%BD%BF%E7%94%A8ipv6/"/>
      <url>/2017/10/23/CERNET%E4%BD%BF%E7%94%A8ipv6/</url>
      
        <content type="html"><![CDATA[<h1>确保能获得ipv6地址</h1><p>直接用网线上网或者使用支持ipv6的路由器</p><h1>修改dns</h1><p>修改为Google的dns，<ruby><del>ipv4和ipv6都要改。改了ipv4的dns才确保打开YouTube后可以播放视频。</del><rt><del>经过多次测试，发现这是一个玄学问题，应该仅需要更改ipv6 dns就可以了。</del></rt></ruby></p><p>更新（20180809）：昨天下午晚些时候起，尽管dns设置为Google Public DNS，ping得到的YouTube地址和nslookup得到的竟然不一致，且浏览器打不开YouTube，Facebook也一样，不过Google依然打得开。大概有什么神秘力量开始介入ipv6了<img src="/images/erha.png" alt="二哈"> 因此只能更改hosts文件了。</p><h1>测试</h1><p>访问<a href="https://mirrors6.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">mirrors6.tuna.tsinghua.edu.cn</a>，或者ping（可以不加参数&quot;-6&quot;）mirrors6.tuna.tsinghua.edu.cn</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Ubuntu16.04安装ISE14.7报错</title>
      <link href="/2017/10/23/Ubuntu16-04%E5%AE%89%E8%A3%85ISE14-7%E6%8A%A5%E9%94%99/"/>
      <url>/2017/10/23/Ubuntu16-04%E5%AE%89%E8%A3%85ISE14-7%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>在ubuntu16.04上安装ISE14.7报错：</p><blockquote><p>You have entered one of the following characters in the program group folder name: <br>/:*?&quot;&lt;&gt;&lt;| <br>These characters are invalid for folder names. Please re-enter a valid folder name.</p></blockquote><p>原因：安装程序所在路径有中文，参考：</p><blockquote><p>https://forums.xilinx.com/t5/Installation-and-Licensing/Installing-Webpack-14-6-on-Ubuntu-Linux-13-04-64-bits/td-p/343841</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>VirtualBox报错NS_ERROR_FAILURE</title>
      <link href="/2017/09/28/VirtualBox%E6%8A%A5%E9%94%99NS-ERROR-FAILURE/"/>
      <url>/2017/09/28/VirtualBox%E6%8A%A5%E9%94%99NS-ERROR-FAILURE/</url>
      
        <content type="html"><![CDATA[<p>大清早打开我的fedora，启动我的VirtualBox，准备打开Windows Xp，然而报错：</p><img src="/2017/09/28/VirtualBox报错NS-ERROR-FAILURE/2017-09-28_08-11-36.png"><blockquote><p>The VM session was closed before any attempt to power it on.</p></blockquote><p>这么不讲道理的吗？说closed就closed。Anyway,百度一下总是好的。然而......</p><img src="/2017/09/28/VirtualBox报错NS-ERROR-FAILURE/jietu_2017-09-28_08-50-13.png"><p>相同的错误代码，不同的问题描述。我可没有更新内核啊。并且，如果更新了内核，应该是运行&quot;/sbin/vboxconfig&quot;才是。</p><p>emmmm，那就换个关键词，直接搜索那个错误描述吧......</p><img src="/2017/09/28/VirtualBox报错NS-ERROR-FAILURE/jietu_2017-09-28_09-05-23.png"><p>找到63个结果，但是，果然让我失望，各个网站相互抄袭，内容都一样的......</p><p><img src="/images/yinxian.png" alt="yinxian"> <img src="/images/pen.png" alt="pen"> <img src="/images/huaji.png" alt="huaji"></p><p>好了，看来得由我自己解决了。 这里交代一下我的系统环境，单硬盘，win10+fedora25双系统，但是由于我想在win10和fedora里运行同一个虚拟机，所以我分了一个50GB的ntfs分区，在fedora里设置fstab文件使之挂载到 /VirtualMachines 。</p><p>虽然我特意在fstab里面加了 rw 参数，但是，万一 /VirtualMachines 没有写入的权限呢？先检查吧......</p><img src="/2017/09/28/VirtualBox报错NS-ERROR-FAILURE/2017-09-28_08-22-36.png"><p>没错，权限是万能的<code>777</code>，我不禁陷入了沉思...</p><p>突然想起，如果在win10关机（不是重启），然后开机进入fedora，挂载ntfs分区，有很大几率会报错，提示只能只读挂载。那么，会不会我的 /VirtualMachines 仍然是不可写的呢？我写个文件试试......</p><img src="/2017/09/28/VirtualBox报错NS-ERROR-FAILURE/2017-09-28_08-23-56.png"><img src="/2017/09/28/VirtualBox报错NS-ERROR-FAILURE/2017-09-28_08-24-10.png"><p>果然不可写！那么应该弄清楚了，虽然我不能解释具体为什么，但是就是win10快速启动导致的这个问题。于是重启进入win10，虽然在win10重启进入fedora就不会出现这个错误，但是总会有在win10关机然后开机进入fedora的时候，因此在win10中把快速启动关了，没问题了。</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
